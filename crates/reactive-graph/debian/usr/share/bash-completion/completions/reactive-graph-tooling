_reactive-graph-tooling() {
    local i cur prev opts cmd
    COMPREPLY=()
    if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
        cur="$2"
    else
        cur="${COMP_WORDS[COMP_CWORD]}"
    fi
    prev="$3"
    cmd=""
    opts=""

    for i in "${COMP_WORDS[@]:0:COMP_CWORD}"
    do
        case "${cmd},${i}" in
            ",$1")
                cmd="reactive__graph__tooling"
                ;;
            reactive__graph__tooling,help)
                cmd="reactive__graph__tooling__help"
                ;;
            reactive__graph__tooling,info)
                cmd="reactive__graph__tooling__info"
                ;;
            reactive__graph__tooling,instances)
                cmd="reactive__graph__tooling__instances"
                ;;
            reactive__graph__tooling,man-pages)
                cmd="reactive__graph__tooling__man__pages"
                ;;
            reactive__graph__tooling,print-markdown-help)
                cmd="reactive__graph__tooling__print__markdown__help"
                ;;
            reactive__graph__tooling,shell-completions)
                cmd="reactive__graph__tooling__shell__completions"
                ;;
            reactive__graph__tooling,update)
                cmd="reactive__graph__tooling__update"
                ;;
            reactive__graph__tooling__help,help)
                cmd="reactive__graph__tooling__help__help"
                ;;
            reactive__graph__tooling__help,info)
                cmd="reactive__graph__tooling__help__info"
                ;;
            reactive__graph__tooling__help,instances)
                cmd="reactive__graph__tooling__help__instances"
                ;;
            reactive__graph__tooling__help,man-pages)
                cmd="reactive__graph__tooling__help__man__pages"
                ;;
            reactive__graph__tooling__help,print-markdown-help)
                cmd="reactive__graph__tooling__help__print__markdown__help"
                ;;
            reactive__graph__tooling__help,shell-completions)
                cmd="reactive__graph__tooling__help__shell__completions"
                ;;
            reactive__graph__tooling__help,update)
                cmd="reactive__graph__tooling__help__update"
                ;;
            reactive__graph__tooling__help__instances,config)
                cmd="reactive__graph__tooling__help__instances__config"
                ;;
            reactive__graph__tooling__help__instances,generate-certificate)
                cmd="reactive__graph__tooling__help__instances__generate__certificate"
                ;;
            reactive__graph__tooling__help__instances,init)
                cmd="reactive__graph__tooling__help__instances__init"
                ;;
            reactive__graph__tooling__help__instances,plugins)
                cmd="reactive__graph__tooling__help__instances__plugins"
                ;;
            reactive__graph__tooling__help__instances,repository)
                cmd="reactive__graph__tooling__help__instances__repository"
                ;;
            reactive__graph__tooling__help__instances__config,graphql)
                cmd="reactive__graph__tooling__help__instances__config__graphql"
                ;;
            reactive__graph__tooling__help__instances__config,instance)
                cmd="reactive__graph__tooling__help__instances__config__instance"
                ;;
            reactive__graph__tooling__help__instances__config,plugins)
                cmd="reactive__graph__tooling__help__instances__config__plugins"
                ;;
            reactive__graph__tooling__help__instances__plugins,install)
                cmd="reactive__graph__tooling__help__instances__plugins__install"
                ;;
            reactive__graph__tooling__help__instances__plugins,uninstall)
                cmd="reactive__graph__tooling__help__instances__plugins__uninstall"
                ;;
            reactive__graph__tooling__help__instances__repository,init)
                cmd="reactive__graph__tooling__help__instances__repository__init"
                ;;
            reactive__graph__tooling__help__instances__repository,remove)
                cmd="reactive__graph__tooling__help__instances__repository__remove"
                ;;
            reactive__graph__tooling__help__man__pages,install)
                cmd="reactive__graph__tooling__help__man__pages__install"
                ;;
            reactive__graph__tooling__help__man__pages,print)
                cmd="reactive__graph__tooling__help__man__pages__print"
                ;;
            reactive__graph__tooling__help__shell__completions,install)
                cmd="reactive__graph__tooling__help__shell__completions__install"
                ;;
            reactive__graph__tooling__help__shell__completions,print)
                cmd="reactive__graph__tooling__help__shell__completions__print"
                ;;
            reactive__graph__tooling__help__update,info)
                cmd="reactive__graph__tooling__help__update__info"
                ;;
            reactive__graph__tooling__help__update,list)
                cmd="reactive__graph__tooling__help__update__list"
                ;;
            reactive__graph__tooling__instances,config)
                cmd="reactive__graph__tooling__instances__config"
                ;;
            reactive__graph__tooling__instances,generate-certificate)
                cmd="reactive__graph__tooling__instances__generate__certificate"
                ;;
            reactive__graph__tooling__instances,help)
                cmd="reactive__graph__tooling__instances__help"
                ;;
            reactive__graph__tooling__instances,init)
                cmd="reactive__graph__tooling__instances__init"
                ;;
            reactive__graph__tooling__instances,plugins)
                cmd="reactive__graph__tooling__instances__plugins"
                ;;
            reactive__graph__tooling__instances,repository)
                cmd="reactive__graph__tooling__instances__repository"
                ;;
            reactive__graph__tooling__instances__config,graphql)
                cmd="reactive__graph__tooling__instances__config__graphql"
                ;;
            reactive__graph__tooling__instances__config,help)
                cmd="reactive__graph__tooling__instances__config__help"
                ;;
            reactive__graph__tooling__instances__config,instance)
                cmd="reactive__graph__tooling__instances__config__instance"
                ;;
            reactive__graph__tooling__instances__config,plugins)
                cmd="reactive__graph__tooling__instances__config__plugins"
                ;;
            reactive__graph__tooling__instances__config__help,graphql)
                cmd="reactive__graph__tooling__instances__config__help__graphql"
                ;;
            reactive__graph__tooling__instances__config__help,help)
                cmd="reactive__graph__tooling__instances__config__help__help"
                ;;
            reactive__graph__tooling__instances__config__help,instance)
                cmd="reactive__graph__tooling__instances__config__help__instance"
                ;;
            reactive__graph__tooling__instances__config__help,plugins)
                cmd="reactive__graph__tooling__instances__config__help__plugins"
                ;;
            reactive__graph__tooling__instances__help,config)
                cmd="reactive__graph__tooling__instances__help__config"
                ;;
            reactive__graph__tooling__instances__help,generate-certificate)
                cmd="reactive__graph__tooling__instances__help__generate__certificate"
                ;;
            reactive__graph__tooling__instances__help,help)
                cmd="reactive__graph__tooling__instances__help__help"
                ;;
            reactive__graph__tooling__instances__help,init)
                cmd="reactive__graph__tooling__instances__help__init"
                ;;
            reactive__graph__tooling__instances__help,plugins)
                cmd="reactive__graph__tooling__instances__help__plugins"
                ;;
            reactive__graph__tooling__instances__help,repository)
                cmd="reactive__graph__tooling__instances__help__repository"
                ;;
            reactive__graph__tooling__instances__help__config,graphql)
                cmd="reactive__graph__tooling__instances__help__config__graphql"
                ;;
            reactive__graph__tooling__instances__help__config,instance)
                cmd="reactive__graph__tooling__instances__help__config__instance"
                ;;
            reactive__graph__tooling__instances__help__config,plugins)
                cmd="reactive__graph__tooling__instances__help__config__plugins"
                ;;
            reactive__graph__tooling__instances__help__plugins,install)
                cmd="reactive__graph__tooling__instances__help__plugins__install"
                ;;
            reactive__graph__tooling__instances__help__plugins,uninstall)
                cmd="reactive__graph__tooling__instances__help__plugins__uninstall"
                ;;
            reactive__graph__tooling__instances__help__repository,init)
                cmd="reactive__graph__tooling__instances__help__repository__init"
                ;;
            reactive__graph__tooling__instances__help__repository,remove)
                cmd="reactive__graph__tooling__instances__help__repository__remove"
                ;;
            reactive__graph__tooling__instances__plugins,help)
                cmd="reactive__graph__tooling__instances__plugins__help"
                ;;
            reactive__graph__tooling__instances__plugins,install)
                cmd="reactive__graph__tooling__instances__plugins__install"
                ;;
            reactive__graph__tooling__instances__plugins,uninstall)
                cmd="reactive__graph__tooling__instances__plugins__uninstall"
                ;;
            reactive__graph__tooling__instances__plugins__help,help)
                cmd="reactive__graph__tooling__instances__plugins__help__help"
                ;;
            reactive__graph__tooling__instances__plugins__help,install)
                cmd="reactive__graph__tooling__instances__plugins__help__install"
                ;;
            reactive__graph__tooling__instances__plugins__help,uninstall)
                cmd="reactive__graph__tooling__instances__plugins__help__uninstall"
                ;;
            reactive__graph__tooling__instances__repository,help)
                cmd="reactive__graph__tooling__instances__repository__help"
                ;;
            reactive__graph__tooling__instances__repository,init)
                cmd="reactive__graph__tooling__instances__repository__init"
                ;;
            reactive__graph__tooling__instances__repository,remove)
                cmd="reactive__graph__tooling__instances__repository__remove"
                ;;
            reactive__graph__tooling__instances__repository__help,help)
                cmd="reactive__graph__tooling__instances__repository__help__help"
                ;;
            reactive__graph__tooling__instances__repository__help,init)
                cmd="reactive__graph__tooling__instances__repository__help__init"
                ;;
            reactive__graph__tooling__instances__repository__help,remove)
                cmd="reactive__graph__tooling__instances__repository__help__remove"
                ;;
            reactive__graph__tooling__man__pages,help)
                cmd="reactive__graph__tooling__man__pages__help"
                ;;
            reactive__graph__tooling__man__pages,install)
                cmd="reactive__graph__tooling__man__pages__install"
                ;;
            reactive__graph__tooling__man__pages,print)
                cmd="reactive__graph__tooling__man__pages__print"
                ;;
            reactive__graph__tooling__man__pages__help,help)
                cmd="reactive__graph__tooling__man__pages__help__help"
                ;;
            reactive__graph__tooling__man__pages__help,install)
                cmd="reactive__graph__tooling__man__pages__help__install"
                ;;
            reactive__graph__tooling__man__pages__help,print)
                cmd="reactive__graph__tooling__man__pages__help__print"
                ;;
            reactive__graph__tooling__shell__completions,help)
                cmd="reactive__graph__tooling__shell__completions__help"
                ;;
            reactive__graph__tooling__shell__completions,install)
                cmd="reactive__graph__tooling__shell__completions__install"
                ;;
            reactive__graph__tooling__shell__completions,print)
                cmd="reactive__graph__tooling__shell__completions__print"
                ;;
            reactive__graph__tooling__shell__completions__help,help)
                cmd="reactive__graph__tooling__shell__completions__help__help"
                ;;
            reactive__graph__tooling__shell__completions__help,install)
                cmd="reactive__graph__tooling__shell__completions__help__install"
                ;;
            reactive__graph__tooling__shell__completions__help,print)
                cmd="reactive__graph__tooling__shell__completions__help__print"
                ;;
            reactive__graph__tooling__update,help)
                cmd="reactive__graph__tooling__update__help"
                ;;
            reactive__graph__tooling__update,info)
                cmd="reactive__graph__tooling__update__info"
                ;;
            reactive__graph__tooling__update,list)
                cmd="reactive__graph__tooling__update__list"
                ;;
            reactive__graph__tooling__update__help,help)
                cmd="reactive__graph__tooling__update__help__help"
                ;;
            reactive__graph__tooling__update__help,info)
                cmd="reactive__graph__tooling__update__help__info"
                ;;
            reactive__graph__tooling__update__help,list)
                cmd="reactive__graph__tooling__update__help__list"
                ;;
            *)
                ;;
        esac
    done

    case "${cmd}" in
        reactive__graph__tooling)
            opts="-h -V --help --version shell-completions man-pages print-markdown-help info instances update help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help)
            opts="shell-completions man-pages print-markdown-help info instances update help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__info)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances)
            opts="config generate-certificate init plugins repository"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__config)
            opts="graphql instance plugins"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__config__graphql)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__config__instance)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__config__plugins)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__generate__certificate)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__init)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__plugins)
            opts="install uninstall"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__plugins__install)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__plugins__uninstall)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__repository)
            opts="init remove"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__repository__init)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__instances__repository__remove)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__man__pages)
            opts="print install"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__man__pages__install)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__man__pages__print)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__print__markdown__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__shell__completions)
            opts="print install"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__shell__completions__install)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__shell__completions__print)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__update)
            opts="info list"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__update__info)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__help__update__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__info)
            opts="-h -V --output-format --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --output-format)
                    COMPREPLY=($(compgen -W "table html-table markdown-table count json json5 toml" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances)
            opts="-h -V --help --version [WORKING_DIRECTORY] config generate-certificate init plugins repository help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__config)
            opts="-h -V --help --version graphql instance plugins help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__config__graphql)
            opts="-w -c -h -V --hostname --port --secure --ssl-certificate-path --ssl-private-key-path --shutdown-timeout --workers --default-context-path --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --hostname)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --port)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --secure)
                    COMPREPLY=($(compgen -W "true false" -- "${cur}"))
                    return 0
                    ;;
                --ssl-certificate-path)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --ssl-private-key-path)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --shutdown-timeout)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --workers)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -w)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --default-context-path)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__config__help)
            opts="graphql instance plugins help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__config__help__graphql)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__config__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__config__help__instance)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__config__help__plugins)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__config__instance)
            opts="-n -d -h -V --instance-name --instance-description --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --instance-name)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -n)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --instance-description)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -d)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__config__plugins)
            opts="-x -p -P -h -V --disable-all-plugins --disabled-plugins --enabled-plugins --disable-hot-deploy --hot-deploy-location --install-location --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --disable-all-plugins)
                    COMPREPLY=($(compgen -W "true false" -- "${cur}"))
                    return 0
                    ;;
                -x)
                    COMPREPLY=($(compgen -W "true false" -- "${cur}"))
                    return 0
                    ;;
                --disabled-plugins)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -p)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --enabled-plugins)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -P)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --disable-hot-deploy)
                    COMPREPLY=($(compgen -W "true false" -- "${cur}"))
                    return 0
                    ;;
                --hot-deploy-location)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --install-location)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__generate__certificate)
            opts="-h -V --help --version [COUNTRY_NAME] [ORGANIZATION_NAME] [COMMON_NAME]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help)
            opts="config generate-certificate init plugins repository help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__config)
            opts="graphql instance plugins"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__config__graphql)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__config__instance)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__config__plugins)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__generate__certificate)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__init)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__plugins)
            opts="install uninstall"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__plugins__install)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__plugins__uninstall)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__repository)
            opts="init remove"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__repository__init)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__help__repository__remove)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__init)
            opts="-h -V --uid --gid --help --version [COUNTRY_NAME] [ORGANIZATION_NAME] [COMMON_NAME]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --uid)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --gid)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__plugins)
            opts="-h -V --help --version install uninstall help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__plugins__help)
            opts="install uninstall help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__plugins__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__plugins__help__install)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__plugins__help__uninstall)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__plugins__install)
            opts="-h -V --help --version <PLUGIN_NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__plugins__uninstall)
            opts="-h -V --help --version <PLUGIN_NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__repository)
            opts="-h -V --help --version init remove help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__repository__help)
            opts="init remove help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__repository__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__repository__help__init)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__repository__help__remove)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 5 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__repository__init)
            opts="-h -V --uid --gid --help --version <LOCAL_NAME> [URL]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --uid)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --gid)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__instances__repository__remove)
            opts="-h -V --help --version <LOCAL_NAME> true false"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__man__pages)
            opts="-h -V --help --version print install help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__man__pages__help)
            opts="print install help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__man__pages__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__man__pages__help__install)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__man__pages__help__print)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__man__pages__install)
            opts="-h -V --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__man__pages__print)
            opts="-h -V --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__print__markdown__help)
            opts="-h -V --help --version"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__shell__completions)
            opts="-h -V --help --version print install help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__shell__completions__help)
            opts="print install help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__shell__completions__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__shell__completions__help__install)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__shell__completions__help__print)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__shell__completions__install)
            opts="-h -V --help --version bash elvish fish powershell zsh"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__shell__completions__print)
            opts="-h -V --help --version bash elvish fish powershell zsh"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__update)
            opts="-n -l -c -v -q -y -h --nightly --latest --current --version --hide-download-progress --hide-output --quiet --no-confirm --help info list help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --version)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -v)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__update__help)
            opts="info list help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__update__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__update__help__info)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__update__help__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__update__info)
            opts="-h --output-format --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --output-format)
                    COMPREPLY=($(compgen -W "table html-table markdown-table count json json5 toml" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        reactive__graph__tooling__update__list)
            opts="-h --output-format --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --output-format)
                    COMPREPLY=($(compgen -W "table html-table markdown-table count json json5 toml" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
    esac
}

if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then
    complete -F _reactive-graph-tooling -o nosort -o bashdefault -o default reactive-graph-tooling
else
    complete -F _reactive-graph-tooling -o bashdefault -o default reactive-graph-tooling
fi
