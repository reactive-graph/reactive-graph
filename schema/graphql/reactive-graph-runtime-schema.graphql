
type Command {
	arguments(name: String): [CommandArgument!]!
	help: String
	name: String
	namespace: String
}

type CommandArgument {
	help: String
	long: String
	name: String!
	required: Boolean!
	short: String
}

"""
The named property stores a value/document as JSON representation.

Each property is represented by it's name (String) and it's value. The value is
a representation of a JSON value/document. Therefore the value can be boolean,
number, string, array or an object. For more information about the data types
please look at https://docs.serde.rs/serde_json/value/enum.Value.html
"""
type CommandResult {
	"""
	The name of the property.
	"""
	name: String!
	"""
	The value of the property as JSON representation.
	"""
	value: JSON!
}



input InstanceAddress {
	"""
	The authentication token.
	"""
	bearer: String
	"""
	The relative URL of the dynamic graph endpoint, by default "/dynamic_graph".
	"""
	endpointDynamicGraph: String
	"""
	The relative URL of the GraphQL endpoint, by default "/graphql".
	"""
	endpointGraphql: String
	"""
	The relative URL of the plugins endpoint, by default "/plugin/graphql".
	"""
	endpointPlugin: String
	"""
	The relative URL of the runtime endpoint, by default "/runtime/graphql".
	"""
	endpointRuntime: String
	"""
	The hostname.
	"""
	hostname: String!
	"""
	The port.
	"""
	port: Int!
	"""
	Secure endpoint.
	"""
	secure: Boolean
	"""
	The user agent.
	"""
	userAgent: String
}

type InstanceInfo {
	description: String!
	gitCommit: String!
	gitTag: String!
	hostname: String!
	"""
	When the remote instance was last seen (ISO8601 / RFC3339).
	"""
	lastSeen: String!
	name: String!
	pluginApiVersion: String!
	port: Int!
	rustcChannel: String!
	rustcVersion: String!
	secure: Boolean!
	version: String!
}


"""
A scalar that can represent any JSON value.
"""
scalar JSON

"""
A scalar that can represent any JSON Object value.
"""
scalar JSONObject

"""
Mutations for the type system, the instances and the flows.
"""
type Mutation {
	commands: MutationCommands!
	remotes: MutationRemotes!
	shutdown: Boolean!
}

"""
Mutations for plugins.
"""
type MutationCommands {
	execute(name: String!, args: JSONObject): CommandResult
}

"""
Mutations for managing remote instances.
"""
type MutationRemotes {
	"""
	Adds a remote.
	"""
	add(address: InstanceAddress!, fetchRemotesFromRemote: Boolean): InstanceInfo!
	fetchRemotesFromAllRemotes: [InstanceInfo!]!
	"""
	Fetches the remotes which are available on the given remote.
	"""
	fetchRemotesFromRemote(address: InstanceAddress!): [InstanceInfo!]!
	"""
	Removes a remote.
	"""
	remove(address: InstanceAddress!): Boolean!
	"""
	Removes all remotes.
	"""
	removeAll: Boolean!
	"""
	Updates a remote.
	"""
	update(address: InstanceAddress!): InstanceInfo!
	"""
	Updates all remotes.
	"""
	updateAll: [InstanceInfo!]!
}

"""
Search queries for the type system, the instances and the flows.
"""
type Query {
	"""
	Returns the commands.
	"""
	commands(name: String): [Command!]!
	"""
	Returns the instance information.
	"""
	instanceInfo: InstanceInfo!
	"""
	Returns the list of remotes.
	"""
	remotes: [InstanceInfo!]!
}


directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
