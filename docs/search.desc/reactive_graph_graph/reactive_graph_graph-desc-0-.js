searchState.loadedDescShard("reactive_graph_graph", 0, "Entity instances represents an typed object which contains …\nCreate a builder for building <code>EntityInstance</code>. On the …\nThe components of the entity instance.\nThe description of the entity instance.\nEntity instance specific extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique identifier of the entity instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the entity instance.\nConstructs a new entity instance with the given type.\nConstructs a new entity instance with the given namespace, …\nConstructs a new entity instance with the given type and …\nThe properties of the entity instance.\nThe type definition of the entity type.\nContainer for entity instances.\nCollection of a type which contains entity instances.\nAdds the given entity instance.\nAdds the given entity instance.\nReturns the entity instances.\nReturns the entity instances.\nReturns true, if the container has an entity instance with …\nReturns true, if an entity instance with the given id …\nRemoves the entity instance with the given id.\nRemoves the entity instance with the given id.\nUpdates the entity instance with the id of the given …\nUpdates the entity instance with the id of the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA flow instance is a container for entity instances and …\nCreate a builder for building <code>FlowInstance</code>. On the …\nTextual description of the flow instance.\nThe entity instances which are contained in this flow …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new flow instance from the wrapper entity …\nThe id of the flow corresponds to the id of the wrapper …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the flow instance.\nThe relation instances which are contained in this flow …\nThe type definition of the entity type of the wrapper …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the description of the instance.\nReturns the name of the instance.\nWrapper for JSON values which allows to create a hash of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContainer for property instances. PropertyInstances …\nReturns the argument unchanged.\nReturns the argument unchanged.\nId of the container\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProperty name\nReturns all property names.\nCreates an empty map of property instances.\nCreates property instances from a property type and …\nAdd or replace property instance with the given name. …\nReturns a sorted list of property instances.\nStore the current value\nReturns the string value of the given property by name\nReturns the boolean value of the given property by name\nReturns the f64 value of the given property by name\nReturns the i64 value of the given property by name\nReturns the string value of the given property by name\nReturns the string value of the given property by name\nReturns the u64 value of the given property by name\nReturns the json value of the given property by name\nReturns the mutability of the property by name.\nSets the value of the given property by name\nSets the value of the given property by name\nSets the value of the given property by name if the …\nSets the mutability of the property by name.\nSets the value of the given property by name. Sends the …\nSets the value of the given property by name if the …\nRelation instances are edges from an outbound entity …\nCreate a builder for building <code>RelationInstance</code>. On the …\nThe components of the entity instance.\nTextual description of the relation instance.\nRelation instance specific extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the relation instance id.\nThe id of the inbound vertex.\nReturns the relation instance type id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the relation instance.\nConstructs a new relation instance with the given …\nConstructs a new relation instance with the given …\nConstructs a new relation instance with the given …\nConstructs a new relation instance with the given …\nConstructs a new relation instance with the given …\nThe id of the outbound vertex.\nThe properties of then relation instance.\nReturns the inner relation type id.\nThe relation instance id is unique and consists of the …\nCollection of a type which contains relation instances.\nContainer for relation instances.\nAdds the given relation instance.\nAdds the given relation instance.\nReturns true, if a relation instance with the given id …\nReturns true, if a relation instance with the given id …\nReturns true, if a relation instance exists which uses an …\nReturns true, if a relation instance exists which uses an …\nReturns the relation instances.\nReturns the relation instances.\nRemoves the relation instance with the given id.\nRemoves the relation instance with the given id.\nUpdates the relation instance with the given id with the …\nUpdates the relation instance with the id of the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSeparator for the string representation of a relation …\nUnique ID of the relation instance\nCreate a builder for building <code>RelationInstanceId</code>. On the …\nReturns the argument unchanged.\nThe id of the inbound entity.\nCalls <code>U::from(self)</code>.\nThe id of the outbound entity.\nThe relation instance type id containing the relation type …\nReturns the full instance type name (relation type name + …\nType identifier of a relation instance.\nReturns the argument unchanged.\nReturns the instance id.\nCalls <code>U::from(self)</code>.\nReturns true, if the relation instance type id is of the …\nBetween two entity instances there can be only one …\nBetween two entity instances there can be only one …\nBetween two entity instances there can be multiple one …\nBetween two entity instances there can be only one …\nBetween two entity instances there can be only one …\nBetween two entity instances there can be multiple one …\nReturns the inner relation type id.\nReturns the full instance type name (relation type name + …\nReactive instance container for components.\nAdds a component to the container.\nAdds a component to the container and initializes the …\nReturns the component types of the container.\nReturns true, if the reactive instance is composed with …\nRemoves a component from the container.\nA component defines a set of properties to be applied to …\nCreate a builder for building <code>Component</code>. On the builder, …\nTextual description of the component.\nComponent specific extensions\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new component with the given name and …\nConstructs a new component with the given name and …\nConstructs an component with the given name but without …\nThe properties which are applied on entity or relation …\nThe type definition of the component.\nAdds the given component.\nAdds the component with the given component_name to the …\nAdds the given components.\nReturns all types having the specified component.\nReturns true, if the type is composed with a component of …\nReturns true, if the type is composed with every given …\nReturns true, if the type is composed with any of the …\nRemoves the component with the given type id.\nRemove the component with the given component_name from …\nRemoves the given components.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAddresses the component of an entity type.\nCreate a builder for building <code>EntityComponentTypeId</code>. On …\nThe component type.\nThe entity type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEntity types defines the type of entity instance.\nCreate a builder for building <code>EntityType</code>. On the builder, …\nThe names of the components of the entity type.\nTextual description of the entity type.\nEntity type specific extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an entity type from the given namespaced type …\nThe properties which are defined by the entity type.\nThe type definition contains the namespace and the type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtension on a type. The extension allows to extend …\nCreate a builder for building <code>Extension</code>. On the builder, …\nTextual description of the extension.\nThe extension as JSON representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an extension from the given namespaced type …\nThe type definition contains the namespace and the type …\nReturns the own extension with the given type. Doesn’t …\nReturns true, if the type contains all given extensions.\nReturns true, if the type contains any of the given …\nReturns true, if the container has an extension with the …\nMerge the given extensions into the own extensions.\nMerge the given extensions into the own extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlow types defines the type of flow instance like a …\nAdds the given entity instance.\nCreate a builder for building <code>FlowType</code>. On the builder, …\nTextual description of the flow type.\nReturns the entity instances (including the wrapper entity …\nThe entity instances which are contained in this flow.\nFlow type specific extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true, if the flow type has an entity instance with …\nReturns true, if an entity instance with the given id …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the relation instances of the flow type\nThe relation instances which are contained in this flow.\nThe type definition of the entity type.\nReturns the entity types which are used by the flow type.\nReturns the relation types which are used by the flow type.\nThe variables. Variables will be replaced by instantiation …\nThe wrapper entity instance.\nReturns the entity type namespace of the flow type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents any type (relations).\nRepresents a JSON array.\nRepresents a JSON boolean.\nDerived from serde_json::Value but without value payload.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe property is immutable.\nThe mutability of a property.\nThe property is mutable.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefinition of a property. The definition contains the name …\nCreate a builder for building <code>PropertyType</code>. On the …\nThe data type of the property\nThe default value of the property.\nThe description of the property.\nProperty specific extensions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true, if the property contains an extension with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies if the property is mutable.\nThe name of the property\nThe property name.\nSpecifies the type of socket - either input socket or …\nCollection of a type which contains property types.\nA type which contains property types.\nAdds the given property.\nAdds a property to the given type.\nReturns the own property with the given name. Doesn’t …\nReturns true, if the type contains all of the given …\nReturns true, if the type contains any of the given …\nReturns true, if the type contains an own property with …\nMerges the given properties into the own properties.\nMerges the given properties into the properties of the …\nRemoves the property with the given name.\nRemove the property with the given name from the given …\nUpdates the property with the given property_name. It’s …\nUpdates the property with the given name of the given type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe property acts as input socket and accepts incoming …\nThe property doesn’t act as input or output socket.\nThe property acts as output socket and accepts outgoing …\nThe socket type defines if the property acts as an input …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true, if the given component type id is equal to …\nReturns true, if the given entity type id is equal to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAddresses the component of a relation type.\nCreate a builder for building <code>RelationComponentTypeId</code>. On …\nThe component type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe relation type.\nA relation type defines the type of relation instance.\nCreate a builder for building <code>RelationType</code>. On the …\nThe names of the components of the relation type.\nTextual description of the relation type.\nRelation type specific extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe inbound component or entity type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe outbound component or entity type.\nThe properties which are defined by the relation type.\nThe type definition contains the namespace and the type …\nMultiple relation instances of a relation type can exist …\nMultiple relation instances of a relation type can exist …\nExactly one relation instance of a relation type can exist …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBind T to a specific namespace.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefinition of a type with the type of the type, the …\nGrants access to the type definition of a type of types.\nCreate a builder for building <code>TypeDefinition</code>. On the …\nConstructs a type definition for a component.\nConstructs a type definition for a entity type.\nConstructs a type definition for a flow type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new type definition from the given type of …\nConstructs a type definition from the given type of types, …\nConstructs a type definition for a relation type.\nReturns the type definition of the type.\nReferences a component of a type.\nThe component.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe type definition.\nReferences an extension of a type.\nThe extension name.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe type definition.\nReferences a property of a type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe property name.\nThe type definition.\nString representation of the type of behaviour types.\nString representation of the type of component types.\nString representation of the type of entity types.\nString representation of the type of extensions.\nString representation of the type of flow types.\nString representation of the type of relation types.\nSeparator for the string representation of a type …\nThe type of a type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the namespace and the name of a type.\nGrants access to the namespace and the type name of a type …\nCreate a builder for building <code>NamespacedType</code>. On the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the namespace of the type.\nReturns the namespace of the namespaced type.\nThe namespace of the type.\nConstructs a new namespaced type.\nReturns the name of the type.\nReturns the name of the namespaced type.\nThe name of the type.\nCollection of a type which contains variables.\nA type which contains variables.\nAdds the given variable.\nAdds a variable to the given type.\nThe data type of the property\nThe description of the property.\nProperty specific extensions\nReturns the variable with the given variable_name.\nReturns true, if the type contains all of the given …\nReturns true, if the type contains any of the given …\nReturns true, if the type contains an variables with the …\nMerges the given variables with the existing variables.\nMerges the given variables with the variables of the given …\nSpecifies if the property is mutable.\nThe name of the property\nRemoves the variable with the given variable_name.\nRemove the variable with the given name from the given …\nSpecifies the type of socket - either input socket or …\nUpdates the variable with the given variable_name. It’s …\nUpdates the variable with the given name of the given type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")