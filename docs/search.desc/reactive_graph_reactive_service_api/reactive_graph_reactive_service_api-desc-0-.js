searchState.loadedDescShard("reactive_graph_reactive_service_api", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds the given behaviour to all instances of the given …\nAdds the given behaviour to all instances of the given …\nAdds the component with the given name to the entity …\nAdds the property with the given name and initial value to …\nReturns the count of registered reactive entity instances.\nReturns the count of registered reactive entity instances …\nReturns the count of registered reactive entity instances …\nReturns the count of registered reactive entity instances …\nCreates a new reactive entity instance of the given type. …\nCreates a reactive entity instance from the given …\nCreates a new reactive entity instance of the given type, …\nReturns the reactive entity instance with the given UUID …\nReturns all registered reactive entity instances.\nReturns all reactive entity instances of the given type …\nReturns all reactive entity instances of the given type …\nReturns the reactive entity instance that matches the …\nReturns the reactive entity instance and the matched path …\nReturns all reactive entity instances of the given …\nReturns all reactive entity instances of the given type.\nReturns the ids of all registered reactive entity …\nReturns true, if an entity instance exists with the given …\nRegisters a reactive entity instance if and only if the …\nRegisters a reactive entity instance and applies …\nRemoves the component with the given name from the entity …\nRemoves the property with the given name from the entity …\nUnregisters the reactive entity instance. Also removes all …\nReturns the count of registered reactive flow instances.\nCreate a new reactive flow instance from the flow type by …\nCreates a new reactive flow instance from the given flow …\nDeletes the flow instance with the given id.\nReturns the flow instance with the given UUID or None.\nReturns all reactive flow instances.\nReturns the flow instance that matches the given label or …\nReturns all reactive entity instances of the given type.\nReturns true, if an flow instance exists with the given …\nRegisters the given reactive flow instance. Does not …\nRegisters the given reactive flow instance and registers …\nRegisters a flow instance provider.\nUnregisters a flow instance provider.\nEmits a system event.\nReturns the reactive entity instance which can be …\nReturns reactive entity instances which can be subscribed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds the given behaviour to all instances of the given …\nAdds the given behaviour to all instances of the given …\nAdds the component with the given name to the relation …\nAdds the property with the given name and initial value to …\nReturns the count of registered reactive relation …\nReturns the count of registered reactive relation …\nReturns the count of registered reactive relation …\nReturns the count of registered reactive relation …\nCreates a new reactive relation instance.\nDeletes the reactive relation instance with the given key.\nReturns the ReactiveRelation with the given type_name, …\nReturns all reactive relation instances.\nReturns all reactive relation instances of the given type …\nReturns all reactive relation instances of the given type …\nReturns all reactive relation instances of the given …\nReturns all reactive relation instances of the given …\nReturns all reactive relation instances of the given …\nReturns all reactive relation instances of the given type.\nReturns all relation instance ids.\nReturns true, if an relation of the given type exists …\nRegisters the given reactive relation instance and applies …\nRemoves the component with the given name from the …\nRemoves the property with the given name from the relation …")