searchState.loadedDescShard("reactive_graph_plugin_service_impl", 0, "The plugin container holds the meta information and the …\nCalls the activate method of the plugin.\nChecks for compatibility.\nConstructs the proxy for the plugin.\nCalls the deactivate method of the plugin\nThe dependencies of the plugin.\nMoves the file from the folder <code>deploy</code> to the folder …\nReturns the argument unchanged.\nThe id.\nCalls <code>U::from(self)</code>.\nThe loaded library.\nLoads the dynamic link library into memory.\nLoads the plugin declaration from the dynamic link library.\nThe path of the plugin in the file system. The plugin is …\nThe plugin declaration.\nThe plugin context.\nRemoves the proxy from the plugin.\nStarts the plugin.\nThe state of the plugin.\nThe filename stem (actually the file_prefix). Does not …\nUninstalls the dynamic link library by removing the file …\nUnloads the dynamic link library.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe plugin containers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe plugin context.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe resolver can be in three modes: Starting, Neutral and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA proxy object which wraps a <code>Plugin</code> and makes sure it can…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")